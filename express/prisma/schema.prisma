generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("CICHLID_CARTEL_DB_NON_POOLING_URL")
}

model BaseSpecie {
  id       String   @id @default(cuid())
  region          Region   @default(OTHER)
  subgroup        Subgroup @default(OTHER)
  category        Category @default(OTHER)
  commonName     String
  scientificName String
  description     String
  maxSize        Int
  temperament     String
  diet            String
  compatability   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  store_specie    StoreSpecie[]
  images          Image[]
}

model StoreSpecie {
  id       String   @id @default(cuid())
  baseSpecie     BaseSpecie? @relation(fields: [baseSpecieId], references: [id])
  baseSpecieId  String?
  region          Region   @default(OTHER)
  subgroup        Subgroup @default(OTHER)
  category        Category @default(OTHER)
  commonName     String
  scientificName String
  description     String
  maxSize        Int
  temperament     String
  diet            String
  compatability   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  images          Image[]
  skus            Sku[]
}

model Store {
  id       String   @id @default(cuid())
  storeName   String
  description  String
  email        String
  phone        String
  isShipping  Boolean  @default(true)
  isPickup  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Sku {
  id            String   @id @default(cuid())
  storeSpecies     StoreSpecie  @relation(fields: [storeSpecieId], references: [id], onDelete: Cascade)
  storeSpecieId   String
  size              Size     @default(M)
  price             String
  sex               Sex      @default(UNSEXED)
  quantity          Int      @default(1)
  isAvailable      Boolean  @default(false)
  isOos            Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  images            Image[]
}


model Image {
  id            String   @id @default(cuid())
  baseSpecie         BaseSpecie @relation(fields: [baseSpecieId], references: [id], onDelete: Cascade)
  baseSpecieId      String
  storeSpecie        StoreSpecie @relation(fields: [storeSpecieId], references: [id], onDelete: Cascade)
  storeSpecieId     String
  sku                 Sku @relation(fields: [skuId], references: [id], onDelete: Cascade)
  skuId              String
  isPrimary          Boolean  @default(false)
  isSecondary        Boolean  @default(false)
  isThumbnail        Boolean  @default(false)
  key                 String
  url                 String
  thumbnailUrl       String?
  fullImageUrl      String?
  fullImageKey      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  // species             Species  @relation(fields: [specie_id], references: [specie_id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  zip        String
  displayName String
  password    String
  email      String @unique
  firstName String
  middleName String?
  birthday  String?
  lastName  String?
   state      String?
  street1    String?
  street2    String?
  city       String?
  country    String?
  isSeller  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  PEACOCK
  HAP
  TANGANYIKA
  OTHER
}

enum Size {
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  VARIETY
}

enum Sex {
  MALE
  FEMALE
  UNSEXED
  BREEDINGGROUP
}

enum Region {
  MALAWI
  VICTORIA
  TANGANYIKA
  NEW_WORLD
  OTHER
}

enum Subgroup {
  OTHER
}
